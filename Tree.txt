Tree:
    Tree data structure is a hierarchical structure structure that consist of nodes connected  by edges. It is a widely used abstract data type that simulates a hierarchical tree structure, with root value and subtree of children.
    Node: Each Element in a tree is called node. it contains a viaur or data.
    Root: The Topmost node in a tree is called the root.
            - It is the only node that has no parent.
    Edge: The connection between two nodes is called a edge.
    Child: A node that is directly connected to another 
    Parent: A node that has one or more child nodes is called a parent.
    Leaf: A node that has one or more child nodes is called a parent.
    Subtree: A Subtree consist of a node and all of its descendants.
    Depth: The Depth of a node is the number of edges from the root to the node.
        - depth of E is 2.
        - depth of H is 3.
        - depth of J is h.
    Height: Height of a node is the number of edges on the longest path from the node to a leaf.
        - In the given tree height is 4.
    Level: The level of a node is the number of edges on the path from the root to the node.
        - A is level 0.
        - B,C is level 1.
        - D,E,F,G is level 2.
        - H is level 3.
        - I,J is level 4.

Binary Tree:
        A Type of tree where each node has at most two children.
Balanced Tree:
        A tree where the height of the two subtree of any node differs by at most one.
Bianry Seach Tree(BST):
        A Binary Tree where each node has a value, and the left subtree of a node contains only nodes with values less than the node's value, and the right subtree contains only the nodes with
        value greater than the node's value.
Properties of Binary Tree:
        - Maximum node at level L = 2^L
        - Maximum nodes in a tree of height H is 2H-1.

        Balanced Tree:
                Difference between height of left subtree and height of right subtree is called Balanced Factor.
                        Balacned Factor = h(L-tree) - h(R-tree)

        AVL Tree:
                A non empty binary tree T is an AVL Tree if given TL and TR to be the left and right subtree of T and h(TL) and h(TR) to be the heigths of subtree TL and TR repsctively.

                - For AVL tree th Balanced factor of  a node can be either -1 , 0 and 1.
                - An empty binary tree is and AVL tree.
                - An AVL tree always be a binary tree and Balanced too.
                - The tree was introduced by Adelson Velshi and Landis (AVL).

                (Binary Tree(BST(AVL)))

                